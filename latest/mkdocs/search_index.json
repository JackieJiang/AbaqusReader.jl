{
    "docs": [
        {
            "location": "/", 
            "text": "AbaqusReader.jl documentation\n\n\n\n\nAbaqusReader.jl documentation\n\n\nExported functions\n\n\nInternal functions\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nExported functions\n\n\n#\n\n\nAbaqusReader.abaqus_read_mesh\n \n \nFunction\n.\n\n\nabaqus_read_mesh(fn::String)\n\n\n\n\nRead ABAQUS mesh from file \nfn\n. Returns a dict with elements, nodes, element sets, node sets and other topologically imporant things, but not the actual model with boundary conditions, load steps and so on.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.abaqus_read_model\n \n \nFunction\n.\n\n\nabaqus_read_model(filename::String)\n\n\n\n\nRead ABAQUS model from file. Include also boundary conditions, load steps and so on. If only mesh is needed, it's better to use \nabaqus_read_mesh\n insted.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.create_surface_elements\n \n \nFunction\n.\n\n\ncreate_surface_elements(mesh, surface_name)\n\n\n\n\nCreate surface elements for \nsurface\n using mesh \nmesh\n. Mesh can be obtained by using \nabaqus_read_mesh\n.\n\n\nsource\n\n\n\n\nInternal functions\n\n\n#\n\n\nAbaqusReader.parse_definition\n \n \nMethod\n.\n\n\nParse string to get set type and name\n\n\nsource\n\n\n#\n\n\nAbaqusReader.parse_section\n \n \nFunction\n.\n\n\nParse nodes from the lines\n\n\nsource\n\n\nParse elements from input lines\n\n\nReads element ids and their connectivity nodes from input lines. If elset definition exists, also adds the set to model.\n\n\nsource\n\n\nParse node and elementset from input lines\n\n\nsource\n\n\nParse SURFACE keyword\n\n\nsource\n\n\n#\n\n\nAbaqusReader.regex_match\n \n \nFunction\n.\n\n\nCuston regex to find match from string. Index used if there are multiple matches\n\n\nsource\n\n\n#\n\n\nAbaqusReader.add_set!\n \n \nFunction\n.\n\n\nAdd set to model, if set exists\n\n\nsource\n\n\n#\n\n\nAbaqusReader.consumeList\n \n \nFunction\n.\n\n\nCustom list iterator\n\n\nSimple iterator for comsuming element list. Depending  on the used element, connectivity nodes might be listed in multiple lines, which is why iterator is used to handle this problem.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.parse_numbers\n \n \nFunction\n.\n\n\nParse all the numbers from string\n\n\nsource\n\n\n#\n\n\nAbaqusReader.register_abaqus_keyword\n \n \nFunction\n.\n\n\nregister_abaqus_keyword(keyword::String)\n\n\n\n\nAdd ABAQUS keyword \ns\n to register. That is, after registration every time keyword show up in \n.inp\n file a new section is started\n\n\nsource\n\n\n#\n\n\nAbaqusReader.is_abaqus_keyword_registered\n \n \nFunction\n.\n\n\nis_abaqus_keyword_registered(keyword::String)\n\n\n\n\nReturn true/false is ABAQUS keyword registered.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.element_mapping\n \n \nConstant\n.\n\n\nelement_mapping\n\n\n\n\nThis mapping table contains information what node ids locally match each side of element.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.find_keywords\n \n \nFunction\n.\n\n\nFind lines, which contain keywords, for example \"*NODE\"\n\n\nsource\n\n\n#\n\n\nAbaqusReader.matchset\n \n \nFunction\n.\n\n\nMatch words from both sides of '=' character\n\n\nsource\n\n\n#\n\n\nAbaqusReader.empty_or_comment_line\n \n \nFunction\n.\n\n\nChecks for a comment or empty line\n\n\nFunction return true, if line starts with comment character \"**\" or has length of 0\n\n\nsource\n\n\n#\n\n\nAbaqusReader.create_surface_element\n \n \nFunction\n.\n\n\nGiven element code, element side and global connectivity, determine boundary element. E.g. for Tet4 we have 4 sides S1..S4 and boundary element is of type Tri3.\n\n\nsource\n\n\n#\n\n\nAbaqusReader.parse_abaqus\n \n \nFunction\n.\n\n\nMain function for parsing Abaqus input file.\n\n\nFunction parses Abaqus input file and generates a dictionary of all the available keywords.\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nAbaqusReader.element_mapping\n\n\nAbaqusReader.abaqus_read_mesh\n\n\nAbaqusReader.abaqus_read_model\n\n\nAbaqusReader.add_set!\n\n\nAbaqusReader.consumeList\n\n\nAbaqusReader.create_surface_element\n\n\nAbaqusReader.create_surface_elements\n\n\nAbaqusReader.empty_or_comment_line\n\n\nAbaqusReader.find_keywords\n\n\nAbaqusReader.is_abaqus_keyword_registered\n\n\nAbaqusReader.matchset\n\n\nAbaqusReader.parse_abaqus\n\n\nAbaqusReader.parse_definition\n\n\nAbaqusReader.parse_numbers\n\n\nAbaqusReader.parse_section\n\n\nAbaqusReader.regex_match\n\n\nAbaqusReader.register_abaqus_keyword", 
            "title": "Home"
        }, 
        {
            "location": "/#abaqusreaderjl-documentation", 
            "text": "AbaqusReader.jl documentation  Exported functions  Internal functions  Index", 
            "title": "AbaqusReader.jl documentation"
        }, 
        {
            "location": "/#exported-functions", 
            "text": "#  AbaqusReader.abaqus_read_mesh     Function .  abaqus_read_mesh(fn::String)  Read ABAQUS mesh from file  fn . Returns a dict with elements, nodes, element sets, node sets and other topologically imporant things, but not the actual model with boundary conditions, load steps and so on.  source  #  AbaqusReader.abaqus_read_model     Function .  abaqus_read_model(filename::String)  Read ABAQUS model from file. Include also boundary conditions, load steps and so on. If only mesh is needed, it's better to use  abaqus_read_mesh  insted.  source  #  AbaqusReader.create_surface_elements     Function .  create_surface_elements(mesh, surface_name)  Create surface elements for  surface  using mesh  mesh . Mesh can be obtained by using  abaqus_read_mesh .  source", 
            "title": "Exported functions"
        }, 
        {
            "location": "/#internal-functions", 
            "text": "#  AbaqusReader.parse_definition     Method .  Parse string to get set type and name  source  #  AbaqusReader.parse_section     Function .  Parse nodes from the lines  source  Parse elements from input lines  Reads element ids and their connectivity nodes from input lines. If elset definition exists, also adds the set to model.  source  Parse node and elementset from input lines  source  Parse SURFACE keyword  source  #  AbaqusReader.regex_match     Function .  Custon regex to find match from string. Index used if there are multiple matches  source  #  AbaqusReader.add_set!     Function .  Add set to model, if set exists  source  #  AbaqusReader.consumeList     Function .  Custom list iterator  Simple iterator for comsuming element list. Depending  on the used element, connectivity nodes might be listed in multiple lines, which is why iterator is used to handle this problem.  source  #  AbaqusReader.parse_numbers     Function .  Parse all the numbers from string  source  #  AbaqusReader.register_abaqus_keyword     Function .  register_abaqus_keyword(keyword::String)  Add ABAQUS keyword  s  to register. That is, after registration every time keyword show up in  .inp  file a new section is started  source  #  AbaqusReader.is_abaqus_keyword_registered     Function .  is_abaqus_keyword_registered(keyword::String)  Return true/false is ABAQUS keyword registered.  source  #  AbaqusReader.element_mapping     Constant .  element_mapping  This mapping table contains information what node ids locally match each side of element.  source  #  AbaqusReader.find_keywords     Function .  Find lines, which contain keywords, for example \"*NODE\"  source  #  AbaqusReader.matchset     Function .  Match words from both sides of '=' character  source  #  AbaqusReader.empty_or_comment_line     Function .  Checks for a comment or empty line  Function return true, if line starts with comment character \"**\" or has length of 0  source  #  AbaqusReader.create_surface_element     Function .  Given element code, element side and global connectivity, determine boundary element. E.g. for Tet4 we have 4 sides S1..S4 and boundary element is of type Tri3.  source  #  AbaqusReader.parse_abaqus     Function .  Main function for parsing Abaqus input file.  Function parses Abaqus input file and generates a dictionary of all the available keywords.  source", 
            "title": "Internal functions"
        }, 
        {
            "location": "/#index", 
            "text": "AbaqusReader.element_mapping  AbaqusReader.abaqus_read_mesh  AbaqusReader.abaqus_read_model  AbaqusReader.add_set!  AbaqusReader.consumeList  AbaqusReader.create_surface_element  AbaqusReader.create_surface_elements  AbaqusReader.empty_or_comment_line  AbaqusReader.find_keywords  AbaqusReader.is_abaqus_keyword_registered  AbaqusReader.matchset  AbaqusReader.parse_abaqus  AbaqusReader.parse_definition  AbaqusReader.parse_numbers  AbaqusReader.parse_section  AbaqusReader.regex_match  AbaqusReader.register_abaqus_keyword", 
            "title": "Index"
        }
    ]
}